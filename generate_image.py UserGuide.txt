# Guide d'Utilisation de l'Outil `generate_images.py`

Ce guide a pour objectif d'expliquer le fonctionnement de l'outil `generate_images.py`, un script Python conçu pour générer des images contenant des combinaisons de lettres et de nombres. Vous y trouverez des informations détaillées sur les arguments disponibles, leurs effets, et comment les utiliser.

---

## **Description Générale**

Le script `generate_images.py` génère des images PNG de dimensions fixes (par défaut 64x64 pixels) contenant des textes formés par la combinaison de lettres et de nombres. Chaque image affiche une combinaison spécifique, par exemple "A1", "B2", "-C-3", etc. Le texte est centré dans l'image, avec une police spécifique et un contour dont l'épaisseur peut être ajustée.

---

## **Prérequis**

- **Python 3.x** doit être installé sur votre système.
- Le module **Pillow** (PIL) est requis. Vous pouvez l'installer avec la commande :

  ```bash
  pip install Pillow
  ```

- La police **Cantarell Bold** doit être installée sur votre système. Si elle n'est pas déjà installée, vous pouvez la télécharger et l'installer depuis [Google Fonts](https://fonts.google.com/specimen/Cantarell).

---

## **Utilisation de l'Outil**

Le script s'exécute en ligne de commande et accepte plusieurs arguments permettant de personnaliser les images générées.

### **Syntaxe Générale**

```bash
python generate_images.py [options]
```

### **Arguments Disponibles**

1. ### **`--start_letter`**

   - **Description** : Spécifie la lettre de début de la plage de lettres à utiliser pour générer les combinaisons.
   - **Valeur par défaut** : `'A'`
   - **Type** : Chaîne de caractères (`str`)
   - **Exemples** :
     - `--start_letter=A` : La plage commence à la lettre "A".
     - `--start_letter=-B` : La plage commence à la lettre négative "-B".

2. ### **`--end_letter`**

   - **Description** : Spécifie la lettre de fin de la plage de lettres.
   - **Valeur par défaut** : `'Z'`
   - **Type** : Chaîne de caractères (`str`)
   - **Exemples** :
     - `--end_letter=Z` : La plage se termine à la lettre "Z".
     - `--end_letter=AD` : La plage se termine à la lettre "AD".

3. ### **`--start_number`**

   - **Description** : Spécifie le nombre de début de la plage de nombres.
   - **Valeur par défaut** : `1`
   - **Type** : Entier (`int`)
   - **Exemples** :
     - `--start_number=1` : La plage commence au nombre 1.
     - `--start_number=-5` : La plage commence au nombre négatif -5.

4. ### **`--end_number`**

   - **Description** : Spécifie le nombre de fin de la plage de nombres.
   - **Valeur par défaut** : `26`
   - **Type** : Entier (`int`)
   - **Exemples** :
     - `--end_number=26` : La plage se termine au nombre 26.
     - `--end_number=30` : La plage se termine au nombre 30.

5. ### **`--contour_thickness`**

   - **Description** : Définit l'épaisseur du contour autour du texte dans les images.
   - **Valeur par défaut** : `1`
   - **Type** : Entier (`int`)
   - **Exemples** :
     - `--contour_thickness=1` : Épaisseur du contour de 1 pixel.
     - `--contour_thickness=2` : Épaisseur du contour de 2 pixels.

---

## **Remarques Importantes**

- **Lettres et Nombres Négatifs** : Vous pouvez spécifier des lettres et des nombres négatifs en ajoutant un signe `-` devant la valeur, par exemple `-A`, `-B`, `-1`, `-10`.
- **Lettres au-delà de "Z"** : Le script gère les lettres au-delà de "Z" en continuant la séquence alphabétique avec "AA", "AB", "AC", etc.
- **Exclusion du Nombre Zéro** : Le nombre zéro (`0`) est exclu des plages générées et ne sera pas utilisé dans les combinaisons.
- **Utilisation du Signe Égal `=`** : Lors de la spécification des arguments avec des valeurs négatives, il est **obligatoire** d'utiliser le signe égal `=` pour éviter les erreurs de parsing. Par exemple :

  ```bash
  --start_letter=-B
  ```

  Si vous omettez le signe égal, le script risque d'interpréter le signe `-` comme une option.

---

## **Exemples d'Utilisation**

### **1. Utilisation Par Défaut**

Génère des images pour toutes les combinaisons de lettres de "A" à "Z" et de nombres de `1` à `26` :

```bash
python generate_images.py
```

### **2. Spécifier une Plage de Lettres Étendue**

Génère des images avec des lettres allant de "A" à "AD" :

```bash
python generate_images.py --end_letter=AD
```

### **3. Inclure des Nombres au-delà de 26**

Génère des images avec des nombres allant de `1` à `30` :

```bash
python generate_images.py --end_number=30
```

### **4. Spécifier des Lettres Négatives**

Génère des images avec des lettres de "-Y" à "-O" :

```bash
python generate_images.py --start_letter=-Y --end_letter=-O
```

### **5. Combinaison de Lettres et Nombres Négatifs**

Génère des images avec des lettres de "-B" à "AD" et des nombres de `-5` à `30` :

```bash
python generate_images.py --start_letter=-B --end_letter=AD --start_number=-5 --end_number=30
```

### **6. Spécifier l'Épaisseur du Contour**

Génère des images avec une épaisseur de contour de `2` pixels :

```bash
python generate_images.py --contour_thickness=2
```

Vous pouvez combiner cette option avec les autres :

```bash
python generate_images.py --start_letter=A --end_letter=Z --contour_thickness=2
```

### **7. Exemple Complet**

Génère des images avec :

- Lettres de "-B" à "AD"
- Nombres de `-5` à `30`
- Épaisseur du contour de `2` pixels

```bash
python generate_images.py --start_letter=-B --end_letter=AD --start_number=-5 --end_number=30 --contour_thickness=2
```

---

## **Notes Supplémentaires**

- **Police Utilisée** : La police utilisée pour le texte est **Cantarell Bold**. Elle est fixée et ne peut pas être modifiée via les arguments du script.
- **Dimensions des Images** : Les images générées ont une dimension fixe de **64x64 pixels**.
- **Format de Sortie** : Les images sont encodées en base64 et stockées dans un fichier JSON nommé `output.json`. Chaque entrée du fichier JSON contient le nom de la combinaison et les données de l'image encodées.
- **Emplacement du Fichier de Sortie** : Le fichier `output.json` est enregistré dans le même répertoire que le script.
- **Gestion des Erreurs** : Si le script rencontre une erreur (par exemple, si les lettres de début ou de fin sont invalides), il affichera un message d'erreur et s'arrêtera.

---

## **Conseils pour l'Utilisation**

- **Vérifiez la Police** : Assurez-vous que la police **Cantarell Bold** est installée sur votre système pour éviter les erreurs lors de l'exécution du script.
- **Attention aux Grandes Plages** : Spécifier des plages très larges peut entraîner la génération d'un grand nombre d'images, ce qui peut ralentir le script et consommer beaucoup d'espace disque.
- **Utilisez le Signe Égal pour les Valeurs Négatives** : N'oubliez pas d'utiliser le signe égal `=` pour les arguments avec des valeurs négatives.

---

## **Assistance et Support**

Si vous rencontrez des difficultés lors de l'utilisation du script ou si vous avez des questions supplémentaires, n'hésitez pas à demander de l'aide ou à consulter les ressources Python pour plus d'informations sur l'exécution des scripts en ligne de commande.

---

## **Historique des Versions**

- **Version Actuelle** : Le script a été mis à jour pour permettre la spécification de plages de lettres et de nombres personnalisées, y compris les valeurs négatives, et pour permettre de définir l'épaisseur du contour autour du texte.

---

## **Résumé des Arguments**

| Argument             | Type   | Par Défaut | Description                                                  |
|----------------------|--------|------------|--------------------------------------------------------------|
| `--start_letter`     | `str`  | `'A'`      | Lettre de début de la plage (peut être négative, ex: `-B`)   |
| `--end_letter`       | `str`  | `'Z'`      | Lettre de fin de la plage (peut être négative, ex: `-Y`)     |
| `--start_number`     | `int`  | `1`        | Nombre de début de la plage (peut être négatif, ex: `-5`)    |
| `--end_number`       | `int`  | `26`       | Nombre de fin de la plage (peut être négatif, ex: `-1`)      |
| `--contour_thickness`| `int`  | `1`        | Épaisseur du contour autour du texte (en pixels)             |

---

## **Exécution du Script**

Pour exécuter le script, ouvrez un terminal ou une invite de commande, naviguez jusqu'au répertoire contenant `generate_images.py`, et utilisez les commandes présentées dans les exemples ci-dessus en fonction de vos besoins.

---

**Merci d'utiliser l'outil `generate_images.py` !**
